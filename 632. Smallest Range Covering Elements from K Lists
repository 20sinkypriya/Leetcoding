Problem Statement:

You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
 

Constraints:

nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-105 <= nums[i][j] <= 105
nums[i] is sorted in non-decreasing order.


Solution: 
from typing import List
import heapq


class Solution:
    def smallestRange(self, nums: List[List[int]]) -> List[int]:
        heap = [(row[0], i, 0) for i, row in enumerate(nums)]
        heapq.heapify(heap)
        ans = [-10**9, 10**9]
        right = max(row[0] for row in nums)
        while heap:
            left, row, col = heapq.heappop(heap)
            if right - left < ans[1] - ans[0]:
                ans = [left, right]
            if col + 1 == len(nums[row]):
                return ans
            right = max(right, nums[row][col + 1])
            heapq.heappush(heap, (nums[row][col + 1], row, col + 1))

# Tests:
if __name__ == '__main__':
    s = Solution()
    # test case 1
    output1 = s.smallestRange([[4,10,15,24,26],[0,9,12,20],[5,18,22,30]])
    expected_output1 = [20,24]
    assert output1 == expected_output1, f"Expected {expected_output1}, but got {output1}"
    # test case 2
    output2 = s.smallestRange([[1,2,3],[1,2,3],[1,2,3]])
    expected_output2 = [1,1]
    assert output2 == expected_output2, f"Expected {expected_output2}, but got {output2}"
    print("All tests passed!")
